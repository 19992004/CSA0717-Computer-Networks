Hamming code bit stuffing                                                                  #include <stdio.h>
#include <string.h>

void generateHamming(char data[5], char code[8]) {
    int d[5], p[4];
    for (int i = 1; i <= 4; i++) d[i] = data[i-1]-'0';

    // positions: 1,2,4 = parity; 3,5,6,7 = data
    code[3] = d[1] + '0';
    code[5] = d[2] + '0';
    code[6] = d[3] + '0';
    code[7] = d[4] + '0';

    // calculate parities
    p[1] = (d[1]^d[2]^d[4])%2;
    p[2] = (d[1]^d[3]^d[4])%2;
    p[3] = (d[2]^d[3]^d[4])%2;

    code[1] = p[1] + '0';
    code[2] = p[2] + '0';
    code[4] = p[3] + '0';

    code[8] = '\0';
}

void bitStuff(char in[], char out[]) {
    int c = 0, k = 0;
    for (int i = 1; in[i] != '\0'; i++) {
        out[k++] = in[i];
        if (in[i]=='1') {
            c++;
            if (c==5) {
                out[k++]='0';
                c=0;
            }
        } else c=0;
    }
    out[k]='\0';
}

int main() {
    char data[5]="1011";   // 4-bit data
    char code[8], stuffed[20];

    generateHamming(data, code);
    bitStuff(code, stuffed);

    printf("Data        : %s\n", data);
    printf("Hamming Code: %s\n", code+1); // skip index 0
    printf("Bit Stuffed : %s\n", stuffed);

    return 0;
}
